Docker

- Estrutura base:
    - Namespaces:
        - Processos pais e filhos (árvore/containers)

    - Containers: processos com subprocessos rodando
    - Cgroups: controlador de recursos computacionais, definindo limites para o processo

    - File System: OFL (overlay file system)
        - Define esquema de imagens e snapshots salvando apenas as mudanças em cada uma, ao invés de todas as dependências.
        - Cria camadas individuais

    - Dockerfile: imagem base, roda comandos, expõe portas
    - Imagens imutáveis, mas com camadas de leitura e escrita
        - Modificações necessitam de build e push

    - Docker host:
        - Volumes: containers são imutáveis; quando morre, tudo se perde
        - Network: comunicação entre os containers
        - Cache: registros do repositório e dependências
        - Daemon API

    - Docker Client:
        - Containers
        - Run, pull, push
        - Volumes
        - Network

- Instalação:
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

- Caso tenha problemas de permissão pra rodar comandos
sudo groupadd docker
sudo usermod -aG docker $USER
# reiniciar o sistema caso necessário
newgrp docker
sudo docker pull hello-world
sudo docker run hello-world
###

docker ps: lista os containers rodando/ativos
docker ps -a: lista os containers que já rodaram

- Parâmetros sempre devem ser especificados após o run
docker run -it ubuntu bash
    - Mesmo de -i -t
        -i: interativo
        -t: tty, deixando digitar no terminal

    - ubuntu: nome da imagem;
        Quando não especificado versão, é o mesmo que usar latest
            ubuntu:latest

    - bash: nome da função a utilizar

- Sem especificar nome, o docker gera aleatórios que podem ser usados com comando start e stop
docker start|stop name

--rm automaticamente remove ao sair do container

docker run -it --rm ubuntu bash

- Um container ter portas ativas (exemplo: docker run nginx -> libera a porta 80) não significa que será acessível externamente
- Outro container conseguiria, fora não devido sermos o host

-p publica a porta que será publicada

docker run -p 8080:80 nginx -> ao acessar a porta 8080 da máquina, conseguirei acessar a porta 80 do container

-d executa um detach na porta, liberando o terminal e deixando um hash do processo

- Removendo container

docker rm id|name

-f força o kill do container que ainda está executando

docker rm -f id|name

docker run -d --name name image
    - Especifica o name para o nome do container da imagem image

exec executa comandos dentro do container especificado
    docker exec nginx ls
        docker exec container command

    docker exec -it nginx bash
        - Abre um terminal interativo, sem "matar" o bash, permitindo escrita
        - Serve para entrar em qualquer container em execução

- Tudo que for gravado dentro do container será perdido, ele é imutável
- É possível montar uma parte do disco local dentro da imagem do container

docker run -d --name nginx -p 8080:80 -v ~/var/www/html/fullcycle/teste:/usr/share/nginx/html
    -v indica volume;
    - O primeiro caminho indica o volume da máquina local
    - O segundo caminho indica o destino na imagem

    -v é um comando antigo, utilizando --mount hoje
    -v cria pastas/arquivos inexistentes se passados no path, mount da erro

docker run -d --name nginx -p 8080:80 --mount type=bind,source="$(pwd)"/html,target=/usr/share/nginx/html nginx

- É possível criar volumes com docker, especificando nome e driver

docker volume create name

docker volume inspect name
    - Exibe informações, bem como data de criação e local do volume na máquina

- É possível vincular os volumes com o mount para dentro dos containers

docker run --name nginx -d --mount type=volume,source=volumeName,target=/app nginx
    - Observe que o type do mount muda de bind pra volume

- Utilizando volumes, ele é compartilhado entre containers
- Utilizando -v, basta especificar o nome do volume diretamente

docker run --name nginx -d -v volumeName:/app nginx

- Docker hub centralizam repositórios e imagens do docker

docker pull image
    - Baixa a imagem para o computador sem necessariamente rodar o container

docker images
    - Lista as imagens baixadas

docker rmi image:tag
    - Remove a imagem na tag específica

- Dockerfile: criação de imagens
    - Parte de uma imagem

FROM: baseImage

RUN: command

    -y confirma a instalação

docker build -t ffantz/nginx-vim:latest
    -t define a tag
    - O próximo parâmetro é o nome da imagem criada

WORKDIR: /path
    - Define o diretório base que será gerado para trabalhar dentro da imagem
    - Ao entrar na imagem, é o diretório padrão

- É possível definir mais de um comando no run separados por linha, basta colocar uma \ no final de cada linha
- É possível copiar um arquivo que esteja dentro do computador para dentro do container

USER: user
    - Define o usuário padrão (precisa existir dentro da imagem)

docker rm $(docker ps -a -q) -f
    -q retorna somente os ids dos containers ativos e inativos

- Comandos especificados ao rodar a imagem sobrescrevem o comando especificado em CMD no Dockerfile, independente de qual seja
- A tag ENTRYPOINT executa um comando fixo, que não pode ser sobrescrito. CMD entra como algo variável (parâmetro do ENTRYPOINT)
    ENTRYPOINT [ "echo", "Hello" ]
    CMD [ "World" ]
        -> executa hello  world (world vem como parâmetro)

- É possível criar variáveis de ambiente para a imagem com a tag ENV no Dockerfile
- É possível validar o Dockerfile das imagens através do repositório no dockerhub

EXPOSE 80
    - Define a porta a ser disponibilizada na imagem

exec "$@" permite que comandos sejam executados após o fim do script sh

docker login
    - Loga no dockerhub

docker push image
    - Sobe a imagem para o dockerhub

- Tipos de network:
    - Bridge: usados para comunicar containers
    - Host: mescla a network do docker com a network do host do docker
    - Overlay: incomum, permite a comunicação entre dockers de máquinas diferentes
    - Maclan: seta um MacAdress pro container
    - None: isolado, não define nenhuma rede

docker network ls
    - Lista as redes

docker network prune
    - Remove as redes que não estão sendo utilizadas

docker network inspect networkName

docker attach containerName
    - Anexa o container no comando, utilizado para entrar quando o container é gerado com o parâmetro -d

docker network create --driver bridge minharede
    - Cria uma rede no driver especificado

docker run -dit --name ubuntu1 --network minharede
    - Quando criados em redes específicas, os containers conseguem se identificar por nome, mesmo que o driver bridge seja utilizado.
    - Sem especificar, enxergam apenas o ip.
    - Rede a parte

docker network connect minharede ubuntu3
    - Conecta um container numa rede específica

docker run -d --name nginx --network host nginx
    - Mescla as redes, permite acessar a porta 80 do nginx na própria porta 80 da máquina.
    - Só funciona com linux

curl http://host.docker.internal:port
    - Executado de dentro de um container para uma porta específica da própria máquina

- Combinando ENTRYPOINT e CMD
    docker run --rm -d --name laravel -p 8001:8001 wesletwillians/laravel --host=0.0.0.0 --port=8001
    - A parte final é substituída pelo CMD no dockerfile da imagem em questão

    ENTRYPOINT [ "php","laravel/artisan","serve" ]
    CMD [ "--host=0.0.0.0" ]

- Rodando uma linguagem de dentro de um container e possibilitando interação local
    - Executado para possibilidar trabalhar em um projeto sem necessariamente instalar as bibliotecas de forma local
    docker run --rm -it -v $(pwd)/:/usr/src/app -p 3000:3000 node:15 bash

- Rodando build a partir de um dockerfile específico:
    docker build - t <nome/imagem> . -f <nome dockerfile>

- Multistage Building:
    - Build do Dockerfile em etapas
    - No FROM do estágio, é possível adicionar um "AS" para dar um nome pra ele
    - No próximo FROM, utilizar um COPY --from=<nome_estagio>

    FROM php7.4-cli AS builder
    ...

    FROM php7.4-fpm-alpine
    COPY --from=builder <caminho> .

- Utilizando docker-compose:
    - É basicamente um tradutor dos comandos brutos do docker em forma de script
    docker-compose up/down

    - Pode-se utilizar um build dentro de cada service do docker-compose para especificar o contexto e o dockerfile
    - Pode-se utilizar -d para desanexar o processo do terminal e --build para atualizar o dockerfile quando houver mudanças no mesmo

- Trabalhando com banco de dados
    - Ao utilizar uma imagem de mysql para compartilhar o banco de dados, utilizar
    command: --innodb-use-native-aio=0

    volumes:
      - ./mysql:/var/lib/mysql

    - O comando anterior compartilha uma pasta local com o container do docker, para que os dados nunca sejam perdidos

- Dependências entre containers:
    entrypoint: dockerize -wait tcp://db:3306 -timeout 20s docker-entrypoint.sh

    - O dockerize testa a conexão no determinado timeout e só quando tem sucesso executa o próximo comando











